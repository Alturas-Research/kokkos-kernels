
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
INCLUDE_DIRECTORIES(REQUIRED_DURING_INSTALLATION_TESTING ${CMAKE_CURRENT_SOURCE_DIR})

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/blas)
INCLUDE_DIRECTORIES(REQUIRED_DURING_INSTALLATION_TESTING ${CMAKE_CURRENT_SOURCE_DIR}/blas)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/sparse)
INCLUDE_DIRECTORIES(REQUIRED_DURING_INSTALLATION_TESTING ${CMAKE_CURRENT_SOURCE_DIR}/sparse)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/graph)
INCLUDE_DIRECTORIES(REQUIRED_DURING_INSTALLATION_TESTING ${CMAKE_CURRENT_SOURCE_DIR}/graph)

#INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/batched)
#INCLUDE_DIRECTORIES(REQUIRED_DURING_INSTALLATION_TESTING ${CMAKE_CURRENT_SOURCE_DIR}/batched)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/common)
INCLUDE_DIRECTORIES(REQUIRED_DURING_INSTALLATION_TESTING ${CMAKE_CURRENT_SOURCE_DIR}/common)

SET(GTEST_SOURCE_DIR ${${PARENT_PACKAGE_NAME}_SOURCE_DIR}/../kokkos/tpls/gtest)
INCLUDE_DIRECTORIES(${GTEST_SOURCE_DIR})

INCLUDE_DIRECTORIES(${GTEST_SOURCE_DIR})
TRIBITS_ADD_LIBRARY(
  kokkoskernels_gtest
  HEADERS ${GTEST_SOURCE_DIR}/gtest/gtest.h
  SOURCES ${GTEST_SOURCE_DIR}/gtest/gtest-all.cc
  TESTONLY
  )

#MD: test is moved to gtest folder.
#TRIBITS_ADD_EXECUTABLE_AND_TEST(
#  CrsMatrixUnitTest
#  SOURCES
#    TestCrsMatrix.cpp
#    ${TEUCHOS_STD_UNIT_TEST_MAIN}
#  COMM serial mpi
#  NUM_MPI_PROCS 1
#  FAIL_REGULAR_EXPRESSION "  FAILED  "
#  )

#TRIBITS_ADD_EXECUTABLE_AND_TEST(
#  ArithTraits
#  SOURCES test-arith-traits.cpp
#  COMM serial mpi
#  NUM_MPI_PROCS 1
#  )


IF (Kokkos_ENABLE_Cuda)
  INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/cuda)
  INCLUDE_DIRECTORIES(REQUIRED_DURING_INSTALLATION_TESTING ${CMAKE_CURRENT_SOURCE_DIR}/cuda)
  APPEND_GLOB(CUDA_BLAS_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/cuda/Test_Cuda_Blas*.cpp)

  TRIBITS_ADD_EXECUTABLE_AND_TEST(
    blas_cuda
    SOURCES
      Test_Main.cpp
      ${CUDA_BLAS_SOURCES}
    NUM_MPI_PROCS 1
    TESTONLYLIBS kokkoskernels_gtest
    )
ENDIF ()

IF (Kokkos_ENABLE_OpenMP)
  INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/openmp)
  INCLUDE_DIRECTORIES(REQUIRED_DURING_INSTALLATION_TESTING ${CMAKE_CURRENT_SOURCE_DIR}/openmp)
  
  APPEND_GLOB(OPENMP_BLAS_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/openmp/Test_OpenMP_Blas*.cpp)

  TRIBITS_ADD_EXECUTABLE_AND_TEST(
    blas_openmp
    SOURCES
      Test_Main.cpp
      ${OPENMP_BLAS_SOURCES}
    COMM serial mpi
    NUM_MPI_PROCS 1
    TESTONLYLIBS kokkoskernels_gtest
    )
ENDIF ()

IF (Kokkos_ENABLE_Serial)
  INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/serial)
  INCLUDE_DIRECTORIES(REQUIRED_DURING_INSTALLATION_TESTING ${CMAKE_CURRENT_SOURCE_DIR}/serial)
  
  APPEND_GLOB(SERIAL_BLAS_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/serial/Test_Serial_Blas*.cpp)

  TRIBITS_ADD_EXECUTABLE_AND_TEST(
    blas_serial
    SOURCES
      Test_Main.cpp
      ${SERIAL_BLAS_SOURCES}
    COMM serial mpi
    NUM_MPI_PROCS 1
    TESTONLYLIBS kokkoskernels_gtest
    )
ENDIF ()

IF (Kokkos_ENABLE_Pthread)
  INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/threads)
  INCLUDE_DIRECTORIES(REQUIRED_DURING_INSTALLATION_TESTING ${CMAKE_CURRENT_SOURCE_DIR}/threads)

  TRIBITS_ADD_EXECUTABLE_AND_TEST(
    blas_threads
    SOURCES
      Test_Main.cpp
      threads/Test_Threads_Blas1_abs.cpp
      threads/Test_Threads_Blas1_asum.cpp
      threads/Test_Threads_Blas1_axpby.cpp
      threads/Test_Threads_Blas1_axpy.cpp
      threads/Test_Threads_Blas1_dot.cpp
      threads/Test_Threads_Blas1_mult.cpp
      threads/Test_Threads_Blas1_nrm1.cpp
      threads/Test_Threads_Blas1_nrm2.cpp
      threads/Test_Threads_Blas1_nrm2_squared.cpp
      threads/Test_Threads_Blas1_nrminf.cpp
      threads/Test_Threads_Blas1_reciprocal.cpp
      threads/Test_Threads_Blas1_scal.cpp
      threads/Test_Threads_Blas1_sum.cpp
      threads/Test_Threads_Blas1_update.cpp
      threads/Test_Threads_Blas2_gemv.cpp
    COMM serial mpi
    NUM_MPI_PROCS 1
    TESTONLYLIBS kokkoskernels_gtest
    )
  TRIBITS_ADD_EXECUTABLE_AND_TEST(
    blas2_MV_Threads
    SOURCES
      blas2_MV_Threads
      KokkosKernels_Blas2_MV_GEMV.hpp
    COMM serial mpi
    NUM_MPI_PROCS 1
    )
ENDIF ()

 
